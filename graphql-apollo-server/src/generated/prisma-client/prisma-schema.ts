// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateEmployee {
  count: Int!
}

type AggregateEmployeer {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Employee {
  id: ID!
  name: String!
  email: String!
  photo_url: String
  createdAt: DateTime!
  updatedAt: DateTime
  employeer: Employeer
  status: Boolean
}

type EmployeeConnection {
  pageInfo: PageInfo!
  edges: [EmployeeEdge]!
  aggregate: AggregateEmployee!
}

input EmployeeCreateInput {
  id: ID
  name: String!
  email: String!
  photo_url: String
  employeer: EmployeerCreateOneWithoutEmployeesInput
  status: Boolean
}

input EmployeeCreateManyWithoutEmployeerInput {
  create: [EmployeeCreateWithoutEmployeerInput!]
  connect: [EmployeeWhereUniqueInput!]
}

input EmployeeCreateWithoutEmployeerInput {
  id: ID
  name: String!
  email: String!
  photo_url: String
  status: Boolean
}

type EmployeeEdge {
  node: Employee!
  cursor: String!
}

enum EmployeeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  photo_url_ASC
  photo_url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
}

type EmployeePreviousValues {
  id: ID!
  name: String!
  email: String!
  photo_url: String
  createdAt: DateTime!
  updatedAt: DateTime
  status: Boolean
}

type Employeer {
  id: ID!
  name: String!
  email: String!
  photo_url: String
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee!]
  createdAt: DateTime!
  updatedAt: DateTime
}

type EmployeerConnection {
  pageInfo: PageInfo!
  edges: [EmployeerEdge]!
  aggregate: AggregateEmployeer!
}

input EmployeerCreateInput {
  id: ID
  name: String!
  email: String!
  photo_url: String
  employees: EmployeeCreateManyWithoutEmployeerInput
}

input EmployeerCreateOneWithoutEmployeesInput {
  create: EmployeerCreateWithoutEmployeesInput
  connect: EmployeerWhereUniqueInput
}

input EmployeerCreateWithoutEmployeesInput {
  id: ID
  name: String!
  email: String!
  photo_url: String
}

type EmployeerEdge {
  node: Employeer!
  cursor: String!
}

enum EmployeerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  photo_url_ASC
  photo_url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EmployeerPreviousValues {
  id: ID!
  name: String!
  email: String!
  photo_url: String
  createdAt: DateTime!
  updatedAt: DateTime
}

type EmployeerSubscriptionPayload {
  mutation: MutationType!
  node: Employeer
  updatedFields: [String!]
  previousValues: EmployeerPreviousValues
}

input EmployeerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmployeerWhereInput
  AND: [EmployeerSubscriptionWhereInput!]
  OR: [EmployeerSubscriptionWhereInput!]
  NOT: [EmployeerSubscriptionWhereInput!]
}

input EmployeerUpdateInput {
  name: String
  email: String
  photo_url: String
  employees: EmployeeUpdateManyWithoutEmployeerInput
}

input EmployeerUpdateManyMutationInput {
  name: String
  email: String
  photo_url: String
}

input EmployeerUpdateOneWithoutEmployeesInput {
  create: EmployeerCreateWithoutEmployeesInput
  update: EmployeerUpdateWithoutEmployeesDataInput
  upsert: EmployeerUpsertWithoutEmployeesInput
  delete: Boolean
  disconnect: Boolean
  connect: EmployeerWhereUniqueInput
}

input EmployeerUpdateWithoutEmployeesDataInput {
  name: String
  email: String
  photo_url: String
}

input EmployeerUpsertWithoutEmployeesInput {
  update: EmployeerUpdateWithoutEmployeesDataInput!
  create: EmployeerCreateWithoutEmployeesInput!
}

input EmployeerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  photo_url: String
  photo_url_not: String
  photo_url_in: [String!]
  photo_url_not_in: [String!]
  photo_url_lt: String
  photo_url_lte: String
  photo_url_gt: String
  photo_url_gte: String
  photo_url_contains: String
  photo_url_not_contains: String
  photo_url_starts_with: String
  photo_url_not_starts_with: String
  photo_url_ends_with: String
  photo_url_not_ends_with: String
  employees_every: EmployeeWhereInput
  employees_some: EmployeeWhereInput
  employees_none: EmployeeWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [EmployeerWhereInput!]
  OR: [EmployeerWhereInput!]
  NOT: [EmployeerWhereInput!]
}

input EmployeerWhereUniqueInput {
  id: ID
  email: String
}

input EmployeeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  photo_url: String
  photo_url_not: String
  photo_url_in: [String!]
  photo_url_not_in: [String!]
  photo_url_lt: String
  photo_url_lte: String
  photo_url_gt: String
  photo_url_gte: String
  photo_url_contains: String
  photo_url_not_contains: String
  photo_url_starts_with: String
  photo_url_not_starts_with: String
  photo_url_ends_with: String
  photo_url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  status: Boolean
  status_not: Boolean
  AND: [EmployeeScalarWhereInput!]
  OR: [EmployeeScalarWhereInput!]
  NOT: [EmployeeScalarWhereInput!]
}

type EmployeeSubscriptionPayload {
  mutation: MutationType!
  node: Employee
  updatedFields: [String!]
  previousValues: EmployeePreviousValues
}

input EmployeeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmployeeWhereInput
  AND: [EmployeeSubscriptionWhereInput!]
  OR: [EmployeeSubscriptionWhereInput!]
  NOT: [EmployeeSubscriptionWhereInput!]
}

input EmployeeUpdateInput {
  name: String
  email: String
  photo_url: String
  employeer: EmployeerUpdateOneWithoutEmployeesInput
  status: Boolean
}

input EmployeeUpdateManyDataInput {
  name: String
  email: String
  photo_url: String
  status: Boolean
}

input EmployeeUpdateManyMutationInput {
  name: String
  email: String
  photo_url: String
  status: Boolean
}

input EmployeeUpdateManyWithoutEmployeerInput {
  create: [EmployeeCreateWithoutEmployeerInput!]
  delete: [EmployeeWhereUniqueInput!]
  connect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutEmployeerInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutEmployeerInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  updateMany: [EmployeeUpdateManyWithWhereNestedInput!]
}

input EmployeeUpdateManyWithWhereNestedInput {
  where: EmployeeScalarWhereInput!
  data: EmployeeUpdateManyDataInput!
}

input EmployeeUpdateWithoutEmployeerDataInput {
  name: String
  email: String
  photo_url: String
  status: Boolean
}

input EmployeeUpdateWithWhereUniqueWithoutEmployeerInput {
  where: EmployeeWhereUniqueInput!
  data: EmployeeUpdateWithoutEmployeerDataInput!
}

input EmployeeUpsertWithWhereUniqueWithoutEmployeerInput {
  where: EmployeeWhereUniqueInput!
  update: EmployeeUpdateWithoutEmployeerDataInput!
  create: EmployeeCreateWithoutEmployeerInput!
}

input EmployeeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  photo_url: String
  photo_url_not: String
  photo_url_in: [String!]
  photo_url_not_in: [String!]
  photo_url_lt: String
  photo_url_lte: String
  photo_url_gt: String
  photo_url_gte: String
  photo_url_contains: String
  photo_url_not_contains: String
  photo_url_starts_with: String
  photo_url_not_starts_with: String
  photo_url_ends_with: String
  photo_url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  employeer: EmployeerWhereInput
  status: Boolean
  status_not: Boolean
  AND: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
}

input EmployeeWhereUniqueInput {
  id: ID
  email: String
}

scalar Long

type Mutation {
  createEmployee(data: EmployeeCreateInput!): Employee!
  updateEmployee(data: EmployeeUpdateInput!, where: EmployeeWhereUniqueInput!): Employee
  updateManyEmployees(data: EmployeeUpdateManyMutationInput!, where: EmployeeWhereInput): BatchPayload!
  upsertEmployee(where: EmployeeWhereUniqueInput!, create: EmployeeCreateInput!, update: EmployeeUpdateInput!): Employee!
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteManyEmployees(where: EmployeeWhereInput): BatchPayload!
  createEmployeer(data: EmployeerCreateInput!): Employeer!
  updateEmployeer(data: EmployeerUpdateInput!, where: EmployeerWhereUniqueInput!): Employeer
  updateManyEmployeers(data: EmployeerUpdateManyMutationInput!, where: EmployeerWhereInput): BatchPayload!
  upsertEmployeer(where: EmployeerWhereUniqueInput!, create: EmployeerCreateInput!, update: EmployeerUpdateInput!): Employeer!
  deleteEmployeer(where: EmployeerWhereUniqueInput!): Employeer
  deleteManyEmployeers(where: EmployeerWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  employee(where: EmployeeWhereUniqueInput!): Employee
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee]!
  employeesConnection(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployeeConnection!
  employeer(where: EmployeerWhereUniqueInput!): Employeer
  employeers(where: EmployeerWhereInput, orderBy: EmployeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employeer]!
  employeersConnection(where: EmployeerWhereInput, orderBy: EmployeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployeerConnection!
  node(id: ID!): Node
}

type Subscription {
  employee(where: EmployeeSubscriptionWhereInput): EmployeeSubscriptionPayload
  employeer(where: EmployeerSubscriptionWhereInput): EmployeerSubscriptionPayload
}
`