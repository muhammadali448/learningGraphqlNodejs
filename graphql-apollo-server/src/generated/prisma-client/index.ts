// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  employee: (where?: EmployeeWhereInput) => Promise<boolean>;
  employeer: (where?: EmployeerWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  employee: (where: EmployeeWhereUniqueInput) => EmployeeNullablePromise;
  employees: (args?: {
    where?: EmployeeWhereInput;
    orderBy?: EmployeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Employee>;
  employeesConnection: (args?: {
    where?: EmployeeWhereInput;
    orderBy?: EmployeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EmployeeConnectionPromise;
  employeer: (where: EmployeerWhereUniqueInput) => EmployeerNullablePromise;
  employeers: (args?: {
    where?: EmployeerWhereInput;
    orderBy?: EmployeerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Employeer>;
  employeersConnection: (args?: {
    where?: EmployeerWhereInput;
    orderBy?: EmployeerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EmployeerConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEmployee: (data: EmployeeCreateInput) => EmployeePromise;
  updateEmployee: (args: {
    data: EmployeeUpdateInput;
    where: EmployeeWhereUniqueInput;
  }) => EmployeePromise;
  updateManyEmployees: (args: {
    data: EmployeeUpdateManyMutationInput;
    where?: EmployeeWhereInput;
  }) => BatchPayloadPromise;
  upsertEmployee: (args: {
    where: EmployeeWhereUniqueInput;
    create: EmployeeCreateInput;
    update: EmployeeUpdateInput;
  }) => EmployeePromise;
  deleteEmployee: (where: EmployeeWhereUniqueInput) => EmployeePromise;
  deleteManyEmployees: (where?: EmployeeWhereInput) => BatchPayloadPromise;
  createEmployeer: (data: EmployeerCreateInput) => EmployeerPromise;
  updateEmployeer: (args: {
    data: EmployeerUpdateInput;
    where: EmployeerWhereUniqueInput;
  }) => EmployeerPromise;
  updateManyEmployeers: (args: {
    data: EmployeerUpdateManyMutationInput;
    where?: EmployeerWhereInput;
  }) => BatchPayloadPromise;
  upsertEmployeer: (args: {
    where: EmployeerWhereUniqueInput;
    create: EmployeerCreateInput;
    update: EmployeerUpdateInput;
  }) => EmployeerPromise;
  deleteEmployeer: (where: EmployeerWhereUniqueInput) => EmployeerPromise;
  deleteManyEmployeers: (where?: EmployeerWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  employee: (
    where?: EmployeeSubscriptionWhereInput
  ) => EmployeeSubscriptionPayloadSubscription;
  employeer: (
    where?: EmployeerSubscriptionWhereInput
  ) => EmployeerSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type EmployeeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "photo_url_ASC"
  | "photo_url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "status_ASC"
  | "status_DESC";

export type EmployeerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "photo_url_ASC"
  | "photo_url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface EmployeerUpdateOneWithoutEmployeesInput {
  create?: Maybe<EmployeerCreateWithoutEmployeesInput>;
  update?: Maybe<EmployeerUpdateWithoutEmployeesDataInput>;
  upsert?: Maybe<EmployeerUpsertWithoutEmployeesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<EmployeerWhereUniqueInput>;
}

export type EmployeeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface EmployeeUpdateManyWithoutEmployeerInput {
  create?: Maybe<
    EmployeeCreateWithoutEmployeerInput[] | EmployeeCreateWithoutEmployeerInput
  >;
  delete?: Maybe<EmployeeWhereUniqueInput[] | EmployeeWhereUniqueInput>;
  connect?: Maybe<EmployeeWhereUniqueInput[] | EmployeeWhereUniqueInput>;
  set?: Maybe<EmployeeWhereUniqueInput[] | EmployeeWhereUniqueInput>;
  disconnect?: Maybe<EmployeeWhereUniqueInput[] | EmployeeWhereUniqueInput>;
  update?: Maybe<
    | EmployeeUpdateWithWhereUniqueWithoutEmployeerInput[]
    | EmployeeUpdateWithWhereUniqueWithoutEmployeerInput
  >;
  upsert?: Maybe<
    | EmployeeUpsertWithWhereUniqueWithoutEmployeerInput[]
    | EmployeeUpsertWithWhereUniqueWithoutEmployeerInput
  >;
  deleteMany?: Maybe<EmployeeScalarWhereInput[] | EmployeeScalarWhereInput>;
  updateMany?: Maybe<
    | EmployeeUpdateManyWithWhereNestedInput[]
    | EmployeeUpdateManyWithWhereNestedInput
  >;
}

export interface EmployeerCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  photo_url?: Maybe<String>;
  employees?: Maybe<EmployeeCreateManyWithoutEmployeerInput>;
}

export interface EmployeerUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  photo_url?: Maybe<String>;
  employees?: Maybe<EmployeeUpdateManyWithoutEmployeerInput>;
}

export interface EmployeerUpsertWithoutEmployeesInput {
  update: EmployeerUpdateWithoutEmployeesDataInput;
  create: EmployeerCreateWithoutEmployeesInput;
}

export interface EmployeerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EmployeerWhereInput>;
  AND?: Maybe<
    EmployeerSubscriptionWhereInput[] | EmployeerSubscriptionWhereInput
  >;
  OR?: Maybe<
    EmployeerSubscriptionWhereInput[] | EmployeerSubscriptionWhereInput
  >;
  NOT?: Maybe<
    EmployeerSubscriptionWhereInput[] | EmployeerSubscriptionWhereInput
  >;
}

export interface EmployeerUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  photo_url?: Maybe<String>;
}

export interface EmployeeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  photo_url?: Maybe<String>;
  employeer?: Maybe<EmployeerCreateOneWithoutEmployeesInput>;
  status?: Maybe<Boolean>;
}

export interface EmployeeUpdateManyWithWhereNestedInput {
  where: EmployeeScalarWhereInput;
  data: EmployeeUpdateManyDataInput;
}

export interface EmployeerCreateOneWithoutEmployeesInput {
  create?: Maybe<EmployeerCreateWithoutEmployeesInput>;
  connect?: Maybe<EmployeerWhereUniqueInput>;
}

export interface EmployeeUpsertWithWhereUniqueWithoutEmployeerInput {
  where: EmployeeWhereUniqueInput;
  update: EmployeeUpdateWithoutEmployeerDataInput;
  create: EmployeeCreateWithoutEmployeerInput;
}

export interface EmployeerCreateWithoutEmployeesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  photo_url?: Maybe<String>;
}

export interface EmployeeUpdateWithoutEmployeerDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  photo_url?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface EmployeeUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  photo_url?: Maybe<String>;
  employeer?: Maybe<EmployeerUpdateOneWithoutEmployeesInput>;
  status?: Maybe<Boolean>;
}

export interface EmployeerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  photo_url?: Maybe<String>;
  photo_url_not?: Maybe<String>;
  photo_url_in?: Maybe<String[] | String>;
  photo_url_not_in?: Maybe<String[] | String>;
  photo_url_lt?: Maybe<String>;
  photo_url_lte?: Maybe<String>;
  photo_url_gt?: Maybe<String>;
  photo_url_gte?: Maybe<String>;
  photo_url_contains?: Maybe<String>;
  photo_url_not_contains?: Maybe<String>;
  photo_url_starts_with?: Maybe<String>;
  photo_url_not_starts_with?: Maybe<String>;
  photo_url_ends_with?: Maybe<String>;
  photo_url_not_ends_with?: Maybe<String>;
  employees_every?: Maybe<EmployeeWhereInput>;
  employees_some?: Maybe<EmployeeWhereInput>;
  employees_none?: Maybe<EmployeeWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EmployeerWhereInput[] | EmployeerWhereInput>;
  OR?: Maybe<EmployeerWhereInput[] | EmployeerWhereInput>;
  NOT?: Maybe<EmployeerWhereInput[] | EmployeerWhereInput>;
}

export interface EmployeeCreateWithoutEmployeerInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  photo_url?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface EmployeeUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  photo_url?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface EmployeeCreateManyWithoutEmployeerInput {
  create?: Maybe<
    EmployeeCreateWithoutEmployeerInput[] | EmployeeCreateWithoutEmployeerInput
  >;
  connect?: Maybe<EmployeeWhereUniqueInput[] | EmployeeWhereUniqueInput>;
}

export interface EmployeeUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  photo_url?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface EmployeeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  photo_url?: Maybe<String>;
  photo_url_not?: Maybe<String>;
  photo_url_in?: Maybe<String[] | String>;
  photo_url_not_in?: Maybe<String[] | String>;
  photo_url_lt?: Maybe<String>;
  photo_url_lte?: Maybe<String>;
  photo_url_gt?: Maybe<String>;
  photo_url_gte?: Maybe<String>;
  photo_url_contains?: Maybe<String>;
  photo_url_not_contains?: Maybe<String>;
  photo_url_starts_with?: Maybe<String>;
  photo_url_not_starts_with?: Maybe<String>;
  photo_url_ends_with?: Maybe<String>;
  photo_url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  employeer?: Maybe<EmployeerWhereInput>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  AND?: Maybe<EmployeeWhereInput[] | EmployeeWhereInput>;
  OR?: Maybe<EmployeeWhereInput[] | EmployeeWhereInput>;
  NOT?: Maybe<EmployeeWhereInput[] | EmployeeWhereInput>;
}

export interface EmployeerUpdateWithoutEmployeesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  photo_url?: Maybe<String>;
}

export interface EmployeeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  photo_url?: Maybe<String>;
  photo_url_not?: Maybe<String>;
  photo_url_in?: Maybe<String[] | String>;
  photo_url_not_in?: Maybe<String[] | String>;
  photo_url_lt?: Maybe<String>;
  photo_url_lte?: Maybe<String>;
  photo_url_gt?: Maybe<String>;
  photo_url_gte?: Maybe<String>;
  photo_url_contains?: Maybe<String>;
  photo_url_not_contains?: Maybe<String>;
  photo_url_starts_with?: Maybe<String>;
  photo_url_not_starts_with?: Maybe<String>;
  photo_url_ends_with?: Maybe<String>;
  photo_url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  AND?: Maybe<EmployeeScalarWhereInput[] | EmployeeScalarWhereInput>;
  OR?: Maybe<EmployeeScalarWhereInput[] | EmployeeScalarWhereInput>;
  NOT?: Maybe<EmployeeScalarWhereInput[] | EmployeeScalarWhereInput>;
}

export interface EmployeeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EmployeeWhereInput>;
  AND?: Maybe<
    EmployeeSubscriptionWhereInput[] | EmployeeSubscriptionWhereInput
  >;
  OR?: Maybe<EmployeeSubscriptionWhereInput[] | EmployeeSubscriptionWhereInput>;
  NOT?: Maybe<
    EmployeeSubscriptionWhereInput[] | EmployeeSubscriptionWhereInput
  >;
}

export interface EmployeeUpdateWithWhereUniqueWithoutEmployeerInput {
  where: EmployeeWhereUniqueInput;
  data: EmployeeUpdateWithoutEmployeerDataInput;
}

export type EmployeerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface EmployeerPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  photo_url?: String;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface EmployeerPreviousValuesPromise
  extends Promise<EmployeerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  photo_url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EmployeerPreviousValuesSubscription
  extends Promise<AsyncIterator<EmployeerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  photo_url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Employeer {
  id: ID_Output;
  name: String;
  email: String;
  photo_url?: String;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface EmployeerPromise extends Promise<Employeer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  photo_url: () => Promise<String>;
  employees: <T = FragmentableArray<Employee>>(args?: {
    where?: EmployeeWhereInput;
    orderBy?: EmployeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EmployeerSubscription
  extends Promise<AsyncIterator<Employeer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  photo_url: () => Promise<AsyncIterator<String>>;
  employees: <T = Promise<AsyncIterator<EmployeeSubscription>>>(args?: {
    where?: EmployeeWhereInput;
    orderBy?: EmployeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EmployeerNullablePromise
  extends Promise<Employeer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  photo_url: () => Promise<String>;
  employees: <T = FragmentableArray<Employee>>(args?: {
    where?: EmployeeWhereInput;
    orderBy?: EmployeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EmployeeEdge {
  node: Employee;
  cursor: String;
}

export interface EmployeeEdgePromise
  extends Promise<EmployeeEdge>,
    Fragmentable {
  node: <T = EmployeePromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmployeeEdgeSubscription
  extends Promise<AsyncIterator<EmployeeEdge>>,
    Fragmentable {
  node: <T = EmployeeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EmployeeSubscriptionPayload {
  mutation: MutationType;
  node: Employee;
  updatedFields: String[];
  previousValues: EmployeePreviousValues;
}

export interface EmployeeSubscriptionPayloadPromise
  extends Promise<EmployeeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmployeePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmployeePreviousValuesPromise>() => T;
}

export interface EmployeeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmployeeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmployeeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmployeePreviousValuesSubscription>() => T;
}

export interface EmployeeConnection {
  pageInfo: PageInfo;
  edges: EmployeeEdge[];
}

export interface EmployeeConnectionPromise
  extends Promise<EmployeeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmployeeEdge>>() => T;
  aggregate: <T = AggregateEmployeePromise>() => T;
}

export interface EmployeeConnectionSubscription
  extends Promise<AsyncIterator<EmployeeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmployeeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmployeeSubscription>() => T;
}

export interface EmployeePreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  photo_url?: String;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  status?: Boolean;
}

export interface EmployeePreviousValuesPromise
  extends Promise<EmployeePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  photo_url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<Boolean>;
}

export interface EmployeePreviousValuesSubscription
  extends Promise<AsyncIterator<EmployeePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  photo_url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Boolean>>;
}

export interface EmployeerSubscriptionPayload {
  mutation: MutationType;
  node: Employeer;
  updatedFields: String[];
  previousValues: EmployeerPreviousValues;
}

export interface EmployeerSubscriptionPayloadPromise
  extends Promise<EmployeerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmployeerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmployeerPreviousValuesPromise>() => T;
}

export interface EmployeerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmployeerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmployeerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmployeerPreviousValuesSubscription>() => T;
}

export interface AggregateEmployeer {
  count: Int;
}

export interface AggregateEmployeerPromise
  extends Promise<AggregateEmployeer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmployeerSubscription
  extends Promise<AsyncIterator<AggregateEmployeer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EmployeerEdge {
  node: Employeer;
  cursor: String;
}

export interface EmployeerEdgePromise
  extends Promise<EmployeerEdge>,
    Fragmentable {
  node: <T = EmployeerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmployeerEdgeSubscription
  extends Promise<AsyncIterator<EmployeerEdge>>,
    Fragmentable {
  node: <T = EmployeerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEmployee {
  count: Int;
}

export interface AggregateEmployeePromise
  extends Promise<AggregateEmployee>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmployeeSubscription
  extends Promise<AsyncIterator<AggregateEmployee>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Employee {
  id: ID_Output;
  name: String;
  email: String;
  photo_url?: String;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  status?: Boolean;
}

export interface EmployeePromise extends Promise<Employee>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  photo_url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  employeer: <T = EmployeerPromise>() => T;
  status: () => Promise<Boolean>;
}

export interface EmployeeSubscription
  extends Promise<AsyncIterator<Employee>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  photo_url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  employeer: <T = EmployeerSubscription>() => T;
  status: () => Promise<AsyncIterator<Boolean>>;
}

export interface EmployeeNullablePromise
  extends Promise<Employee | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  photo_url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  employeer: <T = EmployeerPromise>() => T;
  status: () => Promise<Boolean>;
}

export interface EmployeerConnection {
  pageInfo: PageInfo;
  edges: EmployeerEdge[];
}

export interface EmployeerConnectionPromise
  extends Promise<EmployeerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmployeerEdge>>() => T;
  aggregate: <T = AggregateEmployeerPromise>() => T;
}

export interface EmployeerConnectionSubscription
  extends Promise<AsyncIterator<EmployeerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmployeerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmployeerSubscription>() => T;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Employee",
    embedded: false
  },
  {
    name: "Employeer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/nexus-prisma/dev`
});
export const prisma = new Prisma();
