/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Employee: EmployeeObject
      Employeer: EmployeerObject
      EmployeeConnection: EmployeeConnectionObject
      PageInfo: PageInfoObject
      EmployeeEdge: EmployeeEdgeObject
      AggregateEmployee: AggregateEmployeeObject
      EmployeerConnection: EmployeerConnectionObject
      EmployeerEdge: EmployeerEdgeObject
      AggregateEmployeer: AggregateEmployeerObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      EmployeeSubscriptionPayload: EmployeeSubscriptionPayloadObject
      EmployeePreviousValues: EmployeePreviousValuesObject
      EmployeerSubscriptionPayload: EmployeerSubscriptionPayloadObject
      EmployeerPreviousValues: EmployeerPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Employee: EmployeeFieldDetails
      Employeer: EmployeerFieldDetails
      EmployeeConnection: EmployeeConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      EmployeeEdge: EmployeeEdgeFieldDetails
      AggregateEmployee: AggregateEmployeeFieldDetails
      EmployeerConnection: EmployeerConnectionFieldDetails
      EmployeerEdge: EmployeerEdgeFieldDetails
      AggregateEmployeer: AggregateEmployeerFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      EmployeeSubscriptionPayload: EmployeeSubscriptionPayloadFieldDetails
      EmployeePreviousValues: EmployeePreviousValuesFieldDetails
      EmployeerSubscriptionPayload: EmployeerSubscriptionPayloadFieldDetails
      EmployeerPreviousValues: EmployeerPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      EmployeeWhereUniqueInput: EmployeeWhereUniqueInputInputObject
      EmployeeWhereInput: EmployeeWhereInputInputObject
      EmployeerWhereInput: EmployeerWhereInputInputObject
      EmployeerWhereUniqueInput: EmployeerWhereUniqueInputInputObject
      EmployeeCreateInput: EmployeeCreateInputInputObject
      EmployeerCreateOneWithoutEmployeesInput: EmployeerCreateOneWithoutEmployeesInputInputObject
      EmployeerCreateWithoutEmployeesInput: EmployeerCreateWithoutEmployeesInputInputObject
      EmployeeUpdateInput: EmployeeUpdateInputInputObject
      EmployeerUpdateOneWithoutEmployeesInput: EmployeerUpdateOneWithoutEmployeesInputInputObject
      EmployeerUpdateWithoutEmployeesDataInput: EmployeerUpdateWithoutEmployeesDataInputInputObject
      EmployeerUpsertWithoutEmployeesInput: EmployeerUpsertWithoutEmployeesInputInputObject
      EmployeeUpdateManyMutationInput: EmployeeUpdateManyMutationInputInputObject
      EmployeerCreateInput: EmployeerCreateInputInputObject
      EmployeeCreateManyWithoutEmployeerInput: EmployeeCreateManyWithoutEmployeerInputInputObject
      EmployeeCreateWithoutEmployeerInput: EmployeeCreateWithoutEmployeerInputInputObject
      EmployeerUpdateInput: EmployeerUpdateInputInputObject
      EmployeeUpdateManyWithoutEmployeerInput: EmployeeUpdateManyWithoutEmployeerInputInputObject
      EmployeeUpdateWithWhereUniqueWithoutEmployeerInput: EmployeeUpdateWithWhereUniqueWithoutEmployeerInputInputObject
      EmployeeUpdateWithoutEmployeerDataInput: EmployeeUpdateWithoutEmployeerDataInputInputObject
      EmployeeUpsertWithWhereUniqueWithoutEmployeerInput: EmployeeUpsertWithWhereUniqueWithoutEmployeerInputInputObject
      EmployeeScalarWhereInput: EmployeeScalarWhereInputInputObject
      EmployeeUpdateManyWithWhereNestedInput: EmployeeUpdateManyWithWhereNestedInputInputObject
      EmployeeUpdateManyDataInput: EmployeeUpdateManyDataInputInputObject
      EmployeerUpdateManyMutationInput: EmployeerUpdateManyMutationInputInputObject
      EmployeeSubscriptionWhereInput: EmployeeSubscriptionWhereInputInputObject
      EmployeerSubscriptionWhereInput: EmployeerSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    EmployeeOrderByInput: EmployeeOrderByInputValues,
    EmployeerOrderByInput: EmployeerOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'employee', args?: QueryEmployeeArgs[] | false, alias?: string  } 
  | { name: 'employees', args?: QueryEmployeesArgs[] | false, alias?: string  } 
  | { name: 'employeesConnection', args?: QueryEmployeesConnectionArgs[] | false, alias?: string  } 
  | { name: 'employeer', args?: QueryEmployeerArgs[] | false, alias?: string  } 
  | { name: 'employeers', args?: QueryEmployeersArgs[] | false, alias?: string  } 
  | { name: 'employeersConnection', args?: QueryEmployeersConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'employee'
  | 'employees'
  | 'employeesConnection'
  | 'employeer'
  | 'employeers'
  | 'employeersConnection'


type QueryEmployeeArgs =
  | 'where'
type QueryEmployeesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEmployeesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEmployeerArgs =
  | 'where'
type QueryEmployeersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEmployeersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  employee: {
    type: 'Employee'
    args: Record<QueryEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EmployeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  employees: {
    type: 'Employee'
    args: Record<QueryEmployeesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmployeeWhereInput | null, orderBy?: prisma.EmployeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee[]> | prisma.Employee[]
  }
  employeesConnection: {
    type: 'EmployeeConnection'
    args: Record<QueryEmployeesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmployeeWhereInput | null, orderBy?: prisma.EmployeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeeConnection> | prisma.EmployeeConnection
  }
  employeer: {
    type: 'Employeer'
    args: Record<QueryEmployeerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EmployeerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employeer | null> | prisma.Employeer | null
  }
  employeers: {
    type: 'Employeer'
    args: Record<QueryEmployeersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmployeerWhereInput | null, orderBy?: prisma.EmployeerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employeer[]> | prisma.Employeer[]
  }
  employeersConnection: {
    type: 'EmployeerConnection'
    args: Record<QueryEmployeersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmployeerWhereInput | null, orderBy?: prisma.EmployeerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeerConnection> | prisma.EmployeerConnection
  }
}
  

// Types for Employee

type EmployeeObject =
  | EmployeeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'photo_url', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'employeer', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 

type EmployeeFields =
  | 'id'
  | 'name'
  | 'email'
  | 'photo_url'
  | 'createdAt'
  | 'updatedAt'
  | 'employeer'
  | 'status'



  

export interface EmployeeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  photo_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  employeer: {
    type: 'Employeer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Employee">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employeer | null> | prisma.Employeer | null
  }
  status: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Employeer

type EmployeerObject =
  | EmployeerFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'photo_url', args?: [] | false, alias?: string  } 
  | { name: 'employees', args?: EmployeerEmployeesArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type EmployeerFields =
  | 'id'
  | 'name'
  | 'email'
  | 'photo_url'
  | 'employees'
  | 'createdAt'
  | 'updatedAt'


type EmployeerEmployeesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface EmployeerFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  photo_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  employees: {
    type: 'Employee'
    args: Record<EmployeerEmployeesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Employeer">,
      args: { where?: EmployeeWhereInput | null, orderBy?: prisma.EmployeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee[]> | prisma.Employee[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EmployeeConnection

type EmployeeConnectionObject =
  | EmployeeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EmployeeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EmployeeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EmployeeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeeEdge[]> | prisma.EmployeeEdge[]
  }
  aggregate: {
    type: 'AggregateEmployee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEmployee> | prisma.AggregateEmployee
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EmployeeEdge

type EmployeeEdgeObject =
  | EmployeeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EmployeeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EmployeeEdgeFieldDetails {
  node: {
    type: 'Employee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEmployee

type AggregateEmployeeObject =
  | AggregateEmployeeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEmployeeFields =
  | 'count'



  

export interface AggregateEmployeeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EmployeerConnection

type EmployeerConnectionObject =
  | EmployeerConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EmployeerConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EmployeerConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EmployeerEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeerEdge[]> | prisma.EmployeerEdge[]
  }
  aggregate: {
    type: 'AggregateEmployeer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEmployeer> | prisma.AggregateEmployeer
  }
}
  

// Types for EmployeerEdge

type EmployeerEdgeObject =
  | EmployeerEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EmployeerEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EmployeerEdgeFieldDetails {
  node: {
    type: 'Employeer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeerEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employeer> | prisma.Employeer
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEmployeer

type AggregateEmployeerObject =
  | AggregateEmployeerFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEmployeerFields =
  | 'count'



  

export interface AggregateEmployeerFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createEmployee', args?: MutationCreateEmployeeArgs[] | false, alias?: string  } 
  | { name: 'updateEmployee', args?: MutationUpdateEmployeeArgs[] | false, alias?: string  } 
  | { name: 'updateManyEmployees', args?: MutationUpdateManyEmployeesArgs[] | false, alias?: string  } 
  | { name: 'upsertEmployee', args?: MutationUpsertEmployeeArgs[] | false, alias?: string  } 
  | { name: 'deleteEmployee', args?: MutationDeleteEmployeeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEmployees', args?: MutationDeleteManyEmployeesArgs[] | false, alias?: string  } 
  | { name: 'createEmployeer', args?: MutationCreateEmployeerArgs[] | false, alias?: string  } 
  | { name: 'updateEmployeer', args?: MutationUpdateEmployeerArgs[] | false, alias?: string  } 
  | { name: 'updateManyEmployeers', args?: MutationUpdateManyEmployeersArgs[] | false, alias?: string  } 
  | { name: 'upsertEmployeer', args?: MutationUpsertEmployeerArgs[] | false, alias?: string  } 
  | { name: 'deleteEmployeer', args?: MutationDeleteEmployeerArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEmployeers', args?: MutationDeleteManyEmployeersArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createEmployee'
  | 'updateEmployee'
  | 'updateManyEmployees'
  | 'upsertEmployee'
  | 'deleteEmployee'
  | 'deleteManyEmployees'
  | 'createEmployeer'
  | 'updateEmployeer'
  | 'updateManyEmployeers'
  | 'upsertEmployeer'
  | 'deleteEmployeer'
  | 'deleteManyEmployeers'


type MutationCreateEmployeeArgs =
  | 'data'
type MutationUpdateEmployeeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEmployeesArgs =
  | 'data'
  | 'where'
type MutationUpsertEmployeeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEmployeeArgs =
  | 'where'
type MutationDeleteManyEmployeesArgs =
  | 'where'
type MutationCreateEmployeerArgs =
  | 'data'
type MutationUpdateEmployeerArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEmployeersArgs =
  | 'data'
  | 'where'
type MutationUpsertEmployeerArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEmployeerArgs =
  | 'where'
type MutationDeleteManyEmployeersArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createEmployee: {
    type: 'Employee'
    args: Record<MutationCreateEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  updateEmployee: {
    type: 'Employee'
    args: Record<MutationUpdateEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeeUpdateInput, where: EmployeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  updateManyEmployees: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEmployeesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeeUpdateManyMutationInput, where?: EmployeeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEmployee: {
    type: 'Employee'
    args: Record<MutationUpsertEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmployeeWhereUniqueInput, create: EmployeeCreateInput, update: EmployeeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  deleteEmployee: {
    type: 'Employee'
    args: Record<MutationDeleteEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmployeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  deleteManyEmployees: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEmployeesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EmployeeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEmployeer: {
    type: 'Employeer'
    args: Record<MutationCreateEmployeerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeerCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employeer> | prisma.Employeer
  }
  updateEmployeer: {
    type: 'Employeer'
    args: Record<MutationUpdateEmployeerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeerUpdateInput, where: EmployeerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employeer | null> | prisma.Employeer | null
  }
  updateManyEmployeers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEmployeersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeerUpdateManyMutationInput, where?: EmployeerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEmployeer: {
    type: 'Employeer'
    args: Record<MutationUpsertEmployeerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmployeerWhereUniqueInput, create: EmployeerCreateInput, update: EmployeerUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employeer> | prisma.Employeer
  }
  deleteEmployeer: {
    type: 'Employeer'
    args: Record<MutationDeleteEmployeerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmployeerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employeer | null> | prisma.Employeer | null
  }
  deleteManyEmployeers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEmployeersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EmployeerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'employee', args?: SubscriptionEmployeeArgs[] | false, alias?: string  } 
  | { name: 'employeer', args?: SubscriptionEmployeerArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'employee'
  | 'employeer'


type SubscriptionEmployeeArgs =
  | 'where'
type SubscriptionEmployeerArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  employee: {
    type: 'EmployeeSubscriptionPayload'
    args: Record<SubscriptionEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EmployeeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeeSubscriptionPayload | null> | prisma.EmployeeSubscriptionPayload | null
  }
  employeer: {
    type: 'EmployeerSubscriptionPayload'
    args: Record<SubscriptionEmployeerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EmployeerSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeerSubscriptionPayload | null> | prisma.EmployeerSubscriptionPayload | null
  }
}
  

// Types for EmployeeSubscriptionPayload

type EmployeeSubscriptionPayloadObject =
  | EmployeeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EmployeeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EmployeeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Employee'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmployeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EmployeePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmployeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeePreviousValues | null> | prisma.EmployeePreviousValues | null
  }
}
  

// Types for EmployeePreviousValues

type EmployeePreviousValuesObject =
  | EmployeePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'photo_url', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 

type EmployeePreviousValuesFields =
  | 'id'
  | 'name'
  | 'email'
  | 'photo_url'
  | 'createdAt'
  | 'updatedAt'
  | 'status'



  

export interface EmployeePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  photo_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  status: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EmployeerSubscriptionPayload

type EmployeerSubscriptionPayloadObject =
  | EmployeerSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EmployeerSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EmployeerSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Employeer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmployeerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employeer | null> | prisma.Employeer | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EmployeerPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmployeerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeerPreviousValues | null> | prisma.EmployeerPreviousValues | null
  }
}
  

// Types for EmployeerPreviousValues

type EmployeerPreviousValuesObject =
  | EmployeerPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'photo_url', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type EmployeerPreviousValuesFields =
  | 'id'
  | 'name'
  | 'email'
  | 'photo_url'
  | 'createdAt'
  | 'updatedAt'



  

export interface EmployeerPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  photo_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface EmployeeWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type EmployeeWhereUniqueInputInputObject =
  | Extract<keyof EmployeeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface EmployeeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  photo_url?: string | null
  photo_url_not?: string | null
  photo_url_in?: string[]
  photo_url_not_in?: string[]
  photo_url_lt?: string | null
  photo_url_lte?: string | null
  photo_url_gt?: string | null
  photo_url_gte?: string | null
  photo_url_contains?: string | null
  photo_url_not_contains?: string | null
  photo_url_starts_with?: string | null
  photo_url_not_starts_with?: string | null
  photo_url_ends_with?: string | null
  photo_url_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  employeer?: EmployeerWhereInput | null
  status?: boolean | null
  status_not?: boolean | null
  AND?: EmployeeWhereInput[]
  OR?: EmployeeWhereInput[]
  NOT?: EmployeeWhereInput[]
}
export type EmployeeWhereInputInputObject =
  | Extract<keyof EmployeeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'photo_url_not', alias?: string  } 
  | { name: 'photo_url_in', alias?: string  } 
  | { name: 'photo_url_not_in', alias?: string  } 
  | { name: 'photo_url_lt', alias?: string  } 
  | { name: 'photo_url_lte', alias?: string  } 
  | { name: 'photo_url_gt', alias?: string  } 
  | { name: 'photo_url_gte', alias?: string  } 
  | { name: 'photo_url_contains', alias?: string  } 
  | { name: 'photo_url_not_contains', alias?: string  } 
  | { name: 'photo_url_starts_with', alias?: string  } 
  | { name: 'photo_url_not_starts_with', alias?: string  } 
  | { name: 'photo_url_ends_with', alias?: string  } 
  | { name: 'photo_url_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'employeer', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmployeerWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  photo_url?: string | null
  photo_url_not?: string | null
  photo_url_in?: string[]
  photo_url_not_in?: string[]
  photo_url_lt?: string | null
  photo_url_lte?: string | null
  photo_url_gt?: string | null
  photo_url_gte?: string | null
  photo_url_contains?: string | null
  photo_url_not_contains?: string | null
  photo_url_starts_with?: string | null
  photo_url_not_starts_with?: string | null
  photo_url_ends_with?: string | null
  photo_url_not_ends_with?: string | null
  employees_every?: EmployeeWhereInput | null
  employees_some?: EmployeeWhereInput | null
  employees_none?: EmployeeWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: EmployeerWhereInput[]
  OR?: EmployeerWhereInput[]
  NOT?: EmployeerWhereInput[]
}
export type EmployeerWhereInputInputObject =
  | Extract<keyof EmployeerWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'photo_url_not', alias?: string  } 
  | { name: 'photo_url_in', alias?: string  } 
  | { name: 'photo_url_not_in', alias?: string  } 
  | { name: 'photo_url_lt', alias?: string  } 
  | { name: 'photo_url_lte', alias?: string  } 
  | { name: 'photo_url_gt', alias?: string  } 
  | { name: 'photo_url_gte', alias?: string  } 
  | { name: 'photo_url_contains', alias?: string  } 
  | { name: 'photo_url_not_contains', alias?: string  } 
  | { name: 'photo_url_starts_with', alias?: string  } 
  | { name: 'photo_url_not_starts_with', alias?: string  } 
  | { name: 'photo_url_ends_with', alias?: string  } 
  | { name: 'photo_url_not_ends_with', alias?: string  } 
  | { name: 'employees_every', alias?: string  } 
  | { name: 'employees_some', alias?: string  } 
  | { name: 'employees_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmployeerWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type EmployeerWhereUniqueInputInputObject =
  | Extract<keyof EmployeerWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface EmployeeCreateInput {
  id?: string | null
  name?: string
  email?: string
  photo_url?: string | null
  employeer?: EmployeerCreateOneWithoutEmployeesInput | null
  status?: boolean | null
}
export type EmployeeCreateInputInputObject =
  | Extract<keyof EmployeeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'employeer', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface EmployeerCreateOneWithoutEmployeesInput {
  create?: EmployeerCreateWithoutEmployeesInput | null
  connect?: EmployeerWhereUniqueInput | null
}
export type EmployeerCreateOneWithoutEmployeesInputInputObject =
  | Extract<keyof EmployeerCreateOneWithoutEmployeesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EmployeerCreateWithoutEmployeesInput {
  id?: string | null
  name?: string
  email?: string
  photo_url?: string | null
}
export type EmployeerCreateWithoutEmployeesInputInputObject =
  | Extract<keyof EmployeerCreateWithoutEmployeesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  
export interface EmployeeUpdateInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
  employeer?: EmployeerUpdateOneWithoutEmployeesInput | null
  status?: boolean | null
}
export type EmployeeUpdateInputInputObject =
  | Extract<keyof EmployeeUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'employeer', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface EmployeerUpdateOneWithoutEmployeesInput {
  create?: EmployeerCreateWithoutEmployeesInput | null
  update?: EmployeerUpdateWithoutEmployeesDataInput | null
  upsert?: EmployeerUpsertWithoutEmployeesInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: EmployeerWhereUniqueInput | null
}
export type EmployeerUpdateOneWithoutEmployeesInputInputObject =
  | Extract<keyof EmployeerUpdateOneWithoutEmployeesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EmployeerUpdateWithoutEmployeesDataInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
}
export type EmployeerUpdateWithoutEmployeesDataInputInputObject =
  | Extract<keyof EmployeerUpdateWithoutEmployeesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  
export interface EmployeerUpsertWithoutEmployeesInput {
  update?: EmployeerUpdateWithoutEmployeesDataInput
  create?: EmployeerCreateWithoutEmployeesInput
}
export type EmployeerUpsertWithoutEmployeesInputInputObject =
  | Extract<keyof EmployeerUpsertWithoutEmployeesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EmployeeUpdateManyMutationInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
  status?: boolean | null
}
export type EmployeeUpdateManyMutationInputInputObject =
  | Extract<keyof EmployeeUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface EmployeerCreateInput {
  id?: string | null
  name?: string
  email?: string
  photo_url?: string | null
  employees?: EmployeeCreateManyWithoutEmployeerInput | null
}
export type EmployeerCreateInputInputObject =
  | Extract<keyof EmployeerCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'employees', alias?: string  } 
  
export interface EmployeeCreateManyWithoutEmployeerInput {
  create?: EmployeeCreateWithoutEmployeerInput[]
  connect?: EmployeeWhereUniqueInput[]
}
export type EmployeeCreateManyWithoutEmployeerInputInputObject =
  | Extract<keyof EmployeeCreateManyWithoutEmployeerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EmployeeCreateWithoutEmployeerInput {
  id?: string | null
  name?: string
  email?: string
  photo_url?: string | null
  status?: boolean | null
}
export type EmployeeCreateWithoutEmployeerInputInputObject =
  | Extract<keyof EmployeeCreateWithoutEmployeerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface EmployeerUpdateInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
  employees?: EmployeeUpdateManyWithoutEmployeerInput | null
}
export type EmployeerUpdateInputInputObject =
  | Extract<keyof EmployeerUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'employees', alias?: string  } 
  
export interface EmployeeUpdateManyWithoutEmployeerInput {
  create?: EmployeeCreateWithoutEmployeerInput[]
  delete?: EmployeeWhereUniqueInput[]
  connect?: EmployeeWhereUniqueInput[]
  set?: EmployeeWhereUniqueInput[]
  disconnect?: EmployeeWhereUniqueInput[]
  update?: EmployeeUpdateWithWhereUniqueWithoutEmployeerInput[]
  upsert?: EmployeeUpsertWithWhereUniqueWithoutEmployeerInput[]
  deleteMany?: EmployeeScalarWhereInput[]
  updateMany?: EmployeeUpdateManyWithWhereNestedInput[]
}
export type EmployeeUpdateManyWithoutEmployeerInputInputObject =
  | Extract<keyof EmployeeUpdateManyWithoutEmployeerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EmployeeUpdateWithWhereUniqueWithoutEmployeerInput {
  where?: EmployeeWhereUniqueInput
  data?: EmployeeUpdateWithoutEmployeerDataInput
}
export type EmployeeUpdateWithWhereUniqueWithoutEmployeerInputInputObject =
  | Extract<keyof EmployeeUpdateWithWhereUniqueWithoutEmployeerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EmployeeUpdateWithoutEmployeerDataInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
  status?: boolean | null
}
export type EmployeeUpdateWithoutEmployeerDataInputInputObject =
  | Extract<keyof EmployeeUpdateWithoutEmployeerDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface EmployeeUpsertWithWhereUniqueWithoutEmployeerInput {
  where?: EmployeeWhereUniqueInput
  update?: EmployeeUpdateWithoutEmployeerDataInput
  create?: EmployeeCreateWithoutEmployeerInput
}
export type EmployeeUpsertWithWhereUniqueWithoutEmployeerInputInputObject =
  | Extract<keyof EmployeeUpsertWithWhereUniqueWithoutEmployeerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EmployeeScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  photo_url?: string | null
  photo_url_not?: string | null
  photo_url_in?: string[]
  photo_url_not_in?: string[]
  photo_url_lt?: string | null
  photo_url_lte?: string | null
  photo_url_gt?: string | null
  photo_url_gte?: string | null
  photo_url_contains?: string | null
  photo_url_not_contains?: string | null
  photo_url_starts_with?: string | null
  photo_url_not_starts_with?: string | null
  photo_url_ends_with?: string | null
  photo_url_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  status?: boolean | null
  status_not?: boolean | null
  AND?: EmployeeScalarWhereInput[]
  OR?: EmployeeScalarWhereInput[]
  NOT?: EmployeeScalarWhereInput[]
}
export type EmployeeScalarWhereInputInputObject =
  | Extract<keyof EmployeeScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'photo_url_not', alias?: string  } 
  | { name: 'photo_url_in', alias?: string  } 
  | { name: 'photo_url_not_in', alias?: string  } 
  | { name: 'photo_url_lt', alias?: string  } 
  | { name: 'photo_url_lte', alias?: string  } 
  | { name: 'photo_url_gt', alias?: string  } 
  | { name: 'photo_url_gte', alias?: string  } 
  | { name: 'photo_url_contains', alias?: string  } 
  | { name: 'photo_url_not_contains', alias?: string  } 
  | { name: 'photo_url_starts_with', alias?: string  } 
  | { name: 'photo_url_not_starts_with', alias?: string  } 
  | { name: 'photo_url_ends_with', alias?: string  } 
  | { name: 'photo_url_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmployeeUpdateManyWithWhereNestedInput {
  where?: EmployeeScalarWhereInput
  data?: EmployeeUpdateManyDataInput
}
export type EmployeeUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof EmployeeUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EmployeeUpdateManyDataInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
  status?: boolean | null
}
export type EmployeeUpdateManyDataInputInputObject =
  | Extract<keyof EmployeeUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface EmployeerUpdateManyMutationInput {
  name?: string | null
  email?: string | null
  photo_url?: string | null
}
export type EmployeerUpdateManyMutationInputInputObject =
  | Extract<keyof EmployeerUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  
export interface EmployeeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EmployeeWhereInput | null
  AND?: EmployeeSubscriptionWhereInput[]
  OR?: EmployeeSubscriptionWhereInput[]
  NOT?: EmployeeSubscriptionWhereInput[]
}
export type EmployeeSubscriptionWhereInputInputObject =
  | Extract<keyof EmployeeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmployeerSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EmployeerWhereInput | null
  AND?: EmployeerSubscriptionWhereInput[]
  OR?: EmployeerSubscriptionWhereInput[]
  NOT?: EmployeerSubscriptionWhereInput[]
}
export type EmployeerSubscriptionWhereInputInputObject =
  | Extract<keyof EmployeerSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type EmployeeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'photo_url_ASC'
  | 'photo_url_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'status_ASC'
  | 'status_DESC'
  
export type EmployeerOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'photo_url_ASC'
  | 'photo_url_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  